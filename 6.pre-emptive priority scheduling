#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int process_id;
    int priority;
    int burst_time;
    int remaining_time;
} Process;
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}
void sort_by_priority(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}
int find_highest_priority(Process processes[], int n, int current_time) {
    int highest_priority = 9999; // A high value to ensure we find a valid process
    int highest_priority_idx = -1;
    for (int i = 0; i < n; i++) {
        if (processes[i].remaining_time > 0 && processes[i].priority < highest_priority && processes[i].arrival_time <= current_time) {
            highest_priority = processes[i].priority;
            highest_priority_idx = i;
        }
    }
    return highest_priority_idx;
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process *processes = (Process *)malloc(n * sizeof(Process));
    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    int current_time = 0;
    printf("\nGantt Chart:\n");
    while (1) {
        int highest_priority_idx = find_highest_priority(processes, n, current_time);
        if (highest_priority_idx == -1)
            break;
        printf("| P%d ", processes[highest_priority_idx].process_id);
        current_time++;
        processes[highest_priority_idx].remaining_time--;
        if (processes[highest_priority_idx].remaining_time == 0) {
            processes[highest_priority_idx].priority = 9999; // Mark as completed
        }
    }
    printf("|\n");
    free(processes);
    return 0;
}
